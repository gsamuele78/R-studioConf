#!/bin/bash
# sssd_kerberos_setup.sh - SSSD and Kerberos Configuration for AD Integration

UTILS_SCRIPT_PATH="$(dirname "$0")/common_utils.sh"
SSSD_CONF_TEMPLATE_PATH="$(dirname "$0")/sssd.conf.template" # Path to the template file

if [[ ! -f "$UTILS_SCRIPT_PATH" ]]; then
    echo "Error: common_utils.sh not found at $UTILS_SCRIPT_PATH" >&2
    exit 1
fi
# shellcheck source=common_utils.sh
source "$UTILS_SCRIPT_PATH"

# --- DEFAULT CONFIGURATION VALUES ---
DEFAULT_AD_DOMAIN_LOWER="personale.dir.unibo.it"
DEFAULT_AD_DOMAIN_UPPER="PERSONALE.DIR.UNIBO.IT"
DEFAULT_AD_ADMIN_USER_EXAMPLE="username@${DEFAULT_AD_DOMAIN_UPPER}"
DEFAULT_COMPUTER_OU_BASE="OU=Servizi_Informatici,OU=Dip-BIGEA,OU=Dsa.Auto"
DEFAULT_COMPUTER_OU_CUSTOM_PART="OU=ServerFarm_Navile"
DEFAULT_OS_NAME="Linux"
DEFAULT_FALLBACK_HOMEDIR_TEMPLATE="/home/PERSONALE/%u"
DEFAULT_USE_FQNS="false"
DEFAULT_SIMPLE_ALLOW_GROUPS="STR968-Informatica,Str00968-biome"
DEFAULT_AD_GPO_MAP_SERVICE="+rstudio"
# --- END DEFAULT CONFIGURATION VALUES ---

# --- Global Variables ---
AD_DOMAIN_LOWER=""
AD_DOMAIN_UPPER=""
AD_ADMIN_USER=""
FULL_COMPUTER_OU=""
OS_NAME=""
FALLBACK_HOMEDIR_TEMPLATE=""
USE_FQNS=""
SIMPLE_ALLOW_GROUPS=""
AD_GPO_MAP_SERVICE_CONFIG=""
GENERATED_SSSD_CONF=""
# --- END Global Variables ---

ensure_time_sync() {
    log "Ensuring system time is synchronized..."
    local preferred_ntp_client="chrony"; local alternative_ntp_client="systemd-timesyncd"; local fallback_ntp_client="ntp"
    local ntp_client_to_use=""; local -a ad_ntp_servers=()
    local temp_ad_domain_lower="${AD_DOMAIN_LOWER:-$DEFAULT_AD_DOMAIN_LOWER}"

    if host -t SRV "_ntp._udp.${temp_ad_domain_lower}" > /dev/null 2>&1; then
        log "Attempting to discover AD NTP servers for domain ${temp_ad_domain_lower}..."
        mapfile -t discovered_servers < <(host -t SRV "_ntp._udp.${temp_ad_domain_lower}" | grep "has SRV record" | awk '{print $NF}' | sed 's/\.$//')
        if [[ ${#discovered_servers[@]} -gt 0 ]]; then log "Discovered AD NTP servers: ${discovered_servers[*]}"; ad_ntp_servers=("${discovered_servers[@]}");
        else log "Could not discover AD NTP servers via DNS SRV for ${temp_ad_domain_lower}."; fi
    else log "No DNS SRV records for _ntp._udp.${temp_ad_domain_lower} found, or host command failed."; fi

    if command -v chronyc &>/dev/null; then ntp_client_to_use="chrony"
    elif command -v timedatectl &>/dev/null && systemctl status systemd-timesyncd &>/dev/null ; then ntp_client_to_use="systemd-timesyncd"
    elif command -v ntpq &>/dev/null; then ntp_client_to_use="ntp"
    else
        log "$preferred_ntp_client not found. Attempting to install..."; run_command "apt-get update -y && apt-get install -y $preferred_ntp_client" || {
            log "Failed to install $preferred_ntp_client. Trying $fallback_ntp_client."; run_command "apt-get update -y && apt-get install -y $fallback_ntp_client" || {
                log "Failed to install any NTP client."; return 1; }; ntp_client_to_use="$fallback_ntp_client"; }; ntp_client_to_use="$preferred_ntp_client"
    fi; log "Using NTP client: $ntp_client_to_use"

    if [[ "$ntp_client_to_use" == "chrony" ]]; then run_command "systemctl stop systemd-timesyncd ntp" &>/dev/null; run_command "systemctl disable systemd-timesyncd ntp" &>/dev/null
    elif [[ "$ntp_client_to_use" == "systemd-timesyncd" ]]; then run_command "systemctl stop chrony ntp" &>/dev/null; run_command "systemctl disable chrony ntp" &>/dev/null
    elif [[ "$ntp_client_to_use" == "ntp" ]]; then run_command "systemctl stop chrony systemd-timesyncd" &>/dev/null; run_command "systemctl disable chrony systemd-timesyncd" &>/dev/null; fi

    if [[ "$ntp_client_to_use" == "chrony" ]]; then
        log "Configuring chrony..."; local chrony_conf="/etc/chrony/chrony.conf"; ensure_file_exists "$chrony_conf"
        { printf "# Generated by sssd_kerberos_setup.sh\n"; printf "driftfile /var/lib/chrony/chrony.drift\n"; printf "makestep 1.0 3\n"; printf "rtcsync\n"; printf "logdir /var/log/chrony\n"; } > "$chrony_conf"
        if [[ ${#ad_ntp_servers[@]} -gt 0 ]]; then log "Using discovered AD NTP servers for chrony."
            for server in "${ad_ntp_servers[@]}"; do printf "server %s iburst prefer\n" "$server" >> "$chrony_conf"; done; printf "pool 2.debian.pool.ntp.org iburst\n" >> "$chrony_conf"
        else read -r -p "Enter comma-separated NTP server IPs/hostnames for Chrony (blank for public pools): " user_ntp_servers
            if [[ -n "$user_ntp_servers" ]]; then IFS=',' read -r -a custom_servers <<< "$user_ntp_servers"; for server in "${custom_servers[@]}"; do printf "server %s iburst\n" "$server" >> "$chrony_conf"; done
            else log "Using public NTP pools for chrony."; printf "pool 2.debian.pool.ntp.org iburst prefer\n" >> "$chrony_conf"; fi
        fi; run_command "systemctl restart chrony" && run_command "systemctl enable chrony"; sleep 5; run_command "chronyc sources"; run_command "chronyc tracking"
    elif [[ "$ntp_client_to_use" == "systemd-timesyncd" ]]; then
        log "Configuring systemd-timesyncd..."; local timesyncd_conf="/etc/systemd/timesyncd.conf"; ensure_file_exists "$timesyncd_conf"
        sed -i -E '/^#?NTP=/d' "$timesyncd_conf"; sed -i -E '/^#?FallbackNTP=/d' "$timesyncd_conf" # Clear existing
        if [[ ${#ad_ntp_servers[@]} -gt 0 ]]; then log "Using discovered AD NTP servers for systemd-timesyncd."
            printf "NTP=%s\n" "${ad_ntp_servers[*]}" >> "$timesyncd_conf"; printf "FallbackNTP=0.debian.pool.ntp.org 1.debian.pool.ntp.org 2.debian.pool.ntp.org 3.debian.pool.ntp.org\n" >> "$timesyncd_conf"
        else log "systemd-timesyncd using default NTP. Ensuring a fallback."; printf "NTP=0.debian.pool.ntp.org 1.debian.pool.ntp.org 2.debian.pool.ntp.org 3.debian.pool.ntp.org\n" >> "$timesyncd_conf"; fi
        run_command "systemctl restart systemd-timesyncd" && run_command "systemctl enable systemd-timesyncd"; sleep 2; run_command "timedatectl status"; run_command "timedatectl timesync-status --all || true"
    elif [[ "$ntp_client_to_use" == "ntp" ]]; then
        log "Configuring ntp (ntpd)..."; local ntp_conf="/etc/ntp.conf"; ensure_file_exists "$ntp_conf"
        { printf "driftfile /var/lib/ntp/ntp.drift\n"; printf "leapfile /usr/share/zoneinfo/leap-seconds.list\n"; printf "statistics loopstats peerstats clockstats\n"; printf "filegen loopstats file loopstats type day enable\n"; printf "filegen peerstats file peerstats type day enable\n"; printf "filegen clockstats file clockstats type day enable\n"; printf "restrict -4 default kod notrap nomodify nopeer noquery limited\n"; printf "restrict -6 default kod notrap nomodify nopeer noquery limited\n"; printf "restrict 127.0.0.1\n"; printf "restrict ::1\n"; } > "$ntp_conf"
        if [[ ${#ad_ntp_servers[@]} -gt 0 ]]; then log "Using discovered AD NTP servers for ntpd."
            for server in "${ad_ntp_servers[@]}"; do printf "server %s iburst prefer\n" "$server" >> "$ntp_conf"; done; printf "pool 2.debian.pool.ntp.org iburst\n" >> "$ntp_conf"
        else log "Using public NTP pools for ntpd."; printf "pool 0.debian.pool.ntp.org iburst\n" >> "$ntp_conf"; printf "pool 1.debian.pool.ntp.org iburst\n" >> "$ntp_conf"; printf "pool 2.debian.pool.ntp.org iburst\n" >> "$ntp_conf"; printf "pool 3.debian.pool.ntp.org iburst\n" >> "$ntp_conf"; fi
        run_command "systemctl restart ntp" && run_command "systemctl enable ntp"; sleep 5; run_command "ntpq -p"
    fi

    if timedatectl status | grep -i -q "System clock synchronized: yes"; then log "System time appears to be synchronized."; return 0
    else log "Warning: System time may not be synchronized."; timedatectl status | tee -a "$LOG_FILE"
        read -r -p "Continue despite potential time sync issues? (y/n): " confirm_time
        if [[ "$confirm_time" != "y" && "$confirm_time" != "Y" ]]; then log "Aborting due to time sync concerns."; return 1; fi
    fi; return 0
}

install_sssd_krb_packages() {
    log "Installing SSSD, Kerberos, and related packages..."
    local -a packages=( sssd sssd-tools sssd-ad sssd-krb5 krb5-user libpam-sss libnss-sss realmd packagekit pamtester )
    local -a pkgs_to_install=()
    for pkg in "${packages[@]}"; do if ! dpkg -s "$pkg" &>/dev/null; then pkgs_to_install+=("$pkg"); fi; done
    if [[ ${#pkgs_to_install[@]} -gt 0 ]]; then
        run_command "apt-get update -y" || return 1
        run_command "DEBIAN_FRONTEND=noninteractive apt-get install -y ${pkgs_to_install[*]}" || return 1
        log "Required packages installed/verified: ${pkgs_to_install[*]}"
    else log "All required SSSD/Kerberos packages are already installed."; fi; return 0
}

join_ad_domain_realm() {
    log "Attempting to join AD domain using 'realm'..."
    read -r -p "Enter AD Domain (lowercase) [default: ${DEFAULT_AD_DOMAIN_LOWER}]: " ad_domain_lower_input
    AD_DOMAIN_LOWER=${ad_domain_lower_input:-$DEFAULT_AD_DOMAIN_LOWER}
    AD_DOMAIN_UPPER=$(echo "$AD_DOMAIN_LOWER" | tr '[:lower:]' '[:upper:]')

    read -r -p "Enter AD admin UPN for domain join (e.g., ${DEFAULT_AD_ADMIN_USER_EXAMPLE}): " ad_admin_user_input; AD_ADMIN_USER=${ad_admin_user_input}
    if [[ -z "$AD_ADMIN_USER" ]]; then log "AD Admin User UPN cannot be empty."; return 1; fi

    local computer_ou_custom_part_input; read -r -p "Enter customizable part of Computer OU (e.g., ServerFarm_Navile) [default: ${DEFAULT_COMPUTER_OU_CUSTOM_PART}]: " computer_ou_custom_part_input
    local computer_ou_custom_part=${computer_ou_custom_part_input:-$DEFAULT_COMPUTER_OU_CUSTOM_PART}
    FULL_COMPUTER_OU="OU=${computer_ou_custom_part},${DEFAULT_COMPUTER_OU_BASE}"

    read -r -p "Enter OS Name for AD object [default: ${DEFAULT_OS_NAME}]: " os_name_input; OS_NAME=${os_name_input:-$DEFAULT_OS_NAME}

    log "Will attempt to join domain: $AD_DOMAIN_LOWER | Admin UPN: $AD_ADMIN_USER | Target OU: $FULL_COMPUTER_OU | OS Name: $OS_NAME"
    if ! run_command "realm discover \"$AD_DOMAIN_LOWER\""; then log "ERROR: Domain $AD_DOMAIN_LOWER not discoverable."; return 1; fi

    local realm_join_cmd="realm join --verbose -U \"$AD_ADMIN_USER\" --computer-ou=\"$FULL_COMPUTER_OU\" --os-name=\"$OS_NAME\" \"$AD_DOMAIN_LOWER\""
    if run_command "$realm_join_cmd"; then log "Successfully joined domain $AD_DOMAIN_LOWER using 'realm join'."
    else log "ERROR: 'realm join' failed. CMD: $realm_join_cmd"; return 1; fi; return 0
}

generate_sssd_conf_from_template() {
    log "Gathering information for sssd.conf from template..."
    if [[ ! -f "$SSSD_CONF_TEMPLATE_PATH" ]]; then
        log "ERROR: SSSD template file not found at $SSSD_CONF_TEMPLATE_PATH"; return 1; fi

    if [[ -z "$AD_DOMAIN_LOWER" ]] || [[ -z "$AD_DOMAIN_UPPER" ]]; then
        read -r -p "Enter AD Domain (lowercase) for sssd.conf [default: ${DEFAULT_AD_DOMAIN_LOWER}]: " ad_domain_lower_conf_input
        AD_DOMAIN_LOWER=${ad_domain_lower_conf_input:-$DEFAULT_AD_DOMAIN_LOWER}
        AD_DOMAIN_UPPER=$(echo "$AD_DOMAIN_LOWER" | tr '[:lower:]' '[:upper:]')
    fi

    read -r -p "Enter fallback_homedir template [default: ${DEFAULT_FALLBACK_HOMEDIR_TEMPLATE}]: " fallback_homedir_template_input
    FALLBACK_HOMEDIR_TEMPLATE="${fallback_homedir_template_input:-$DEFAULT_FALLBACK_HOMEDIR_TEMPLATE}"
    read -r -p "Use fully qualified names for login? (true/false) [default: ${DEFAULT_USE_FQNS}]: " use_fqns_input
    USE_FQNS="${use_fqns_input:-$DEFAULT_USE_FQNS}"
    read -r -p "Enter comma-separated AD groups to allow login (blank for none) [default: '${DEFAULT_SIMPLE_ALLOW_GROUPS}']: " simple_allow_groups_input
    SIMPLE_ALLOW_GROUPS="${simple_allow_groups_input:-$DEFAULT_SIMPLE_ALLOW_GROUPS}"
    read -r -p "Enter GPO service mapping for RStudio (e.g., +rstudio) [default: '${DEFAULT_AD_GPO_MAP_SERVICE}']: " ad_gpo_map_service_input
    AD_GPO_MAP_SERVICE_CONFIG="${ad_gpo_map_service_input:-$DEFAULT_AD_GPO_MAP_SERVICE}"
    
    local client_hostname; client_hostname=$(hostname -f 2>/dev/null || hostname)

    log "--- SSSD Configuration Summary (from template + inputs) ---"
    log "Template: $SSSD_CONF_TEMPLATE_PATH"
    log "Domain: $AD_DOMAIN_LOWER | Realm: $AD_DOMAIN_UPPER | HomeDir: $FALLBACK_HOMEDIR_TEMPLATE"
    log "FQNs: $USE_FQNS | Groups: ${SIMPLE_ALLOW_GROUPS:-Any} | GPO RStudio: ${AD_GPO_MAP_SERVICE_CONFIG:-None}"
    log "Client Hostname: $client_hostname"
    log "---"

    local template_content; template_content=$(<"$SSSD_CONF_TEMPLATE_PATH")
    
    # Replace placeholders
    GENERATED_SSSD_CONF="${template_content//%%AD_DOMAIN_LOWER%%/$AD_DOMAIN_LOWER}"
    GENERATED_SSSD_CONF="${GENERATED_SSSD_CONF//%%AD_DOMAIN_UPPER%%/$AD_DOMAIN_UPPER}"
    GENERATED_SSSD_CONF="${GENERATED_SSSD_CONF//%%FALLBACK_HOMEDIR_TEMPLATE%%/$FALLBACK_HOMEDIR_TEMPLATE}"
    GENERATED_SSSD_CONF="${GENERATED_SSSD_CONF//%%USE_FQNS%%/$USE_FQNS}"
    GENERATED_SSSD_CONF="${GENERATED_SSSD_CONF//%%CLIENT_HOSTNAME%%/$client_hostname}"

    local simple_allow_groups_line_val="#simple_allow_groups = "
    if [[ -n "$SIMPLE_ALLOW_GROUPS" ]]; then
        simple_allow_groups_line_val="simple_allow_groups = $SIMPLE_ALLOW_GROUPS"
    fi
    GENERATED_SSSD_CONF="${GENERATED_SSSD_CONF//%%SIMPLE_ALLOW_GROUPS_LINE%%/$simple_allow_groups_line_val}"

    local ad_gpo_map_service_line_val="#ad_gpo_map_service = "
    if [[ -n "$AD_GPO_MAP_SERVICE_CONFIG" ]]; then
        ad_gpo_map_service_line_val="ad_gpo_map_service = $AD_GPO_MAP_SERVICE_CONFIG"
    fi
    GENERATED_SSSD_CONF="${GENERATED_SSSD_CONF//%%AD_GPO_MAP_SERVICE_LINE%%/$ad_gpo_map_service_line_val}"
    
    return 0
}

configure_sssd_conf() {
    log "Configuring /etc/sssd/sssd.conf from template..."
    generate_sssd_conf_from_template || { log "Failed to generate sssd.conf content from template."; return 1; }
    local sssd_conf="/etc/sssd/sssd.conf"; ensure_dir_exists "$(dirname "$sssd_conf")"
    log "Writing generated configuration to $sssd_conf"
    if [[ -f "$sssd_conf" ]]; then run_command "cp \"$sssd_conf\" \"${sssd_conf}.bak_pre_script_$(date +%Y%m%d_%H%M%S)\""; fi
    printf "%s\n" "$GENERATED_SSSD_CONF" > "$sssd_conf" || { log "ERROR: Failed to write to $sssd_conf"; return 1; }
    run_command "chmod 0600 $sssd_conf" || log "Warning: Failed to set permissions on $sssd_conf."
    log "$sssd_conf configured. Content:"; run_command "cat $sssd_conf"; return 0
}

configure_krb5_conf() {
    log "Ensuring basic Kerberos configuration in /etc/krb5.conf..."
    local krb5_conf="/etc/krb5.conf"; ensure_file_exists "$krb5_conf" || return 1
    if [[ -z "$AD_DOMAIN_UPPER" ]]; then read -r -p "Enter AD Kerberos Realm (UPPERCASE) for krb5.conf [default: ${DEFAULT_AD_DOMAIN_UPPER}]: " ad_domain_upper_krb_input; AD_DOMAIN_UPPER=${ad_domain_upper_krb_input:-$DEFAULT_AD_DOMAIN_UPPER}; fi
    
    if ! grep -q "\[libdefaults\]" "$krb5_conf"; then printf "\n[libdefaults]\n" >> "$krb5_conf"; fi
    if ! grep -q "default_realm" "$krb5_conf"; then run_command "sed -i '/\\[libdefaults\\]/a \ \ default_realm = $AD_DOMAIN_UPPER' '$krb5_conf'" # Note single quotes for sed script
    else run_command "sed -i 's/^[[:space:]]*default_realm[[:space:]]*=.*$/  default_realm = $AD_DOMAIN_UPPER/' '$krb5_conf'"; fi
    
    local default_ccache_line="default_ccache_name = FILE:/tmp/krb5cc_%{uid}"
    if ! grep -q "default_ccache_name" "$krb5_conf"; then run_command "sed -i '/\\[libdefaults\\]/a \ \ $default_ccache_line' '$krb5_conf'"; fi
    log "$krb5_conf updated. Relying on 'realm join' for KDC info. Content:"; run_command "cat $krb5_conf"; return 0
}

configure_nsswitch() {
    log "Checking and configuring /etc/nsswitch.conf..."
    local nss_conf="/etc/nsswitch.conf"; ensure_file_exists "$nss_conf" || return 1
    local -a nss_entries=("passwd" "group" "shadow" "sudoers")
    for entry in "${nss_entries[@]}"; do
        if grep -q "^${entry}:" "$nss_conf" && ! grep -q "^${entry}:.* sss\b" "$nss_conf"; then
            log "Adding 'sss' to '$entry' in $nss_conf..."
            # Add 'sss' after 'files', or if 'files' not present, add 'files sss'. This handles various existing formats.
            run_command "sed -i -E -e '/^'\"${entry}\"':[[:space:]]*files/ s/(files)([[:space:]]*)/\1 sss\2/' -e '/^'\"${entry}\"':/ { /sss/! s/$/ sss/ }' '$nss_conf'"
        elif ! grep -q "^${entry}:" "$nss_conf"; then add_line_if_not_present "$entry: files sss" "$nss_conf"; fi
    done; log "$nss_conf content:"; run_command "cat $nss_conf"; return 0
}

configure_pam() {
    log "Checking and configuring PAM for SSSD..."
    if command -v pam-auth-update &>/dev/null; then
        log "Running pam-auth-update to ensure SSS and mkhomedir modules are enabled..."
        if ! run_command "DEBIAN_FRONTEND=noninteractive pam-auth-update --enable sss --enable mkhomedir"; then log "Warning: pam-auth-update command failed."; fi
    else log "Warning: pam-auth-update not found. Manual PAM configuration required."; fi
    local rstudio_pam_file="/etc/pam.d/rstudio"
    if [[ -f "$rstudio_pam_file" ]]; then log "RStudio PAM file ($rstudio_pam_file) content:"; run_command "cat $rstudio_pam_file";
    else log "$rstudio_pam_file not found. RStudio may use default stack (e.g., common-*)."; fi; return 0
}

restart_and_verify_sssd() {
    log "Restarting SSSD service..."; run_command "systemctl daemon-reload"
    if ! run_command "systemctl restart sssd"; then log "ERROR: Failed to restart SSSD."; return 1; fi
    if ! run_command "systemctl is-active --quiet sssd"; then log "ERROR: SSSD not active post-restart."; return 1; fi
    run_command "systemctl enable sssd"; log "SSSD restarted and active.";
    log "Clearing SSSD cache..."; run_command "sss_cache -E"; return 0
}

test_kerberos_ticket() {
    log "Testing Kerberos ticket acquisition..."; local test_user_kinit_default_example="user@${AD_DOMAIN_UPPER:-$DEFAULT_AD_DOMAIN_UPPER}"
    read -r -p "Enter an AD UPN to test kinit [e.g., ${test_user_kinit_default_example}]: " test_user
    if [[ -z "$test_user" ]]; then log "Skipping kinit test."; return 0; fi
    log "Attempting kinit for $test_user (password prompt will follow)."
    if run_command "kinit \"$test_user\""; then log "kinit successful."; run_command "klist"; run_command "kdestroy";
    else log "ERROR: kinit failed."; return 1; fi; return 0
}

test_user_lookup() {
    log "Testing user information lookup..."; local use_fqn_effective="${USE_FQNS:-$DEFAULT_USE_FQNS}"; local test_user_lookup_example="user"
    if [[ "$use_fqn_effective" == "true" ]]; then test_user_lookup_example="user@${AD_DOMAIN_LOWER:-$DEFAULT_AD_DOMAIN_LOWER}"; fi
    read -r -p "Enter an AD username to test getent/id [e.g., ${test_user_lookup_example}]: " test_user
    if [[ -z "$test_user" ]]; then log "Skipping user lookup test."; return 0; fi
    if ! run_command "getent passwd \"$test_user\""; then log "ERROR: 'getent passwd' failed."; return 1; fi
    if ! run_command "id \"$test_user\""; then log "ERROR: 'id' failed."; return 1; fi; log "User lookup successful."; return 0
}

test_rstudio_pam_integration() {
    log "Testing RStudio PAM integration..."; if ! command -v pamtester &>/dev/null; then log "pamtester not found."; return 1; fi
    local use_fqn_effective="${USE_FQNS:-$DEFAULT_USE_FQNS}"; local test_user_pam_example="user"
    if [[ "$use_fqn_effective" == "true" ]]; then test_user_pam_example="user@${AD_DOMAIN_LOWER:-$DEFAULT_AD_DOMAIN_LOWER}"; fi
    read -r -p "Enter AD username for RStudio PAM test [e.g., ${test_user_pam_example}]: " test_user_pam
    if [[ -z "$test_user_pam" ]]; then log "Skipping RStudio PAM test."; return 0; fi
    log "Testing PAM for RStudio service with user '$test_user_pam' (password prompt will follow)."
    if run_command "pamtester --verbose rstudio \"$test_user_pam\" authenticate acct_mgmt"; then log "RStudio PAM test SUCCEEDED.";
    else log "RStudio PAM test FAILED."; return 1; fi; return 0
}

uninstall_sssd_kerberos() {
    log "Starting SSSD/Kerberos Uninstallation..."; backup_config
    read -r -p "This will attempt to leave domain, remove packages, and clean configs. Sure? (y/n): " confirm_uninstall
    if [[ "$confirm_uninstall" != "y" && "$confirm_uninstall" != "Y" ]]; then log "Uninstallation cancelled."; return 0; fi

    local current_domain_lower="${AD_DOMAIN_LOWER}"; if [[ -z "$current_domain_lower" ]]; then if command -v realm &>/dev/null && realm list --name-only --configured=yes &>/dev/null; then current_domain_lower=$(realm list --name-only --configured=yes | head -n 1); elif [[ -f "/etc/sssd/sssd.conf" ]] && grep -q "^domains = " /etc/sssd/sssd.conf; then current_domain_lower=$(grep "^domains = " /etc/sssd/sssd.conf | awk '{print $3}'); fi; fi
    if [[ -n "$current_domain_lower" ]]; then
        log "Attempting to leave domain: $current_domain_lower"; local leave_user; read -r -p "Enter AD admin UPN for domain leave (blank for unauth leave): " leave_user_input; leave_user=${leave_user_input}
        local leave_cmd="realm leave \"$current_domain_lower\""; if [[ -n "$leave_user" ]]; then leave_cmd="realm leave -U \"$leave_user\" \"$current_domain_lower\""; fi
        if run_command "$leave_cmd"; then log "Successfully left domain $current_domain_lower."; else log "Warning: Failed to leave domain $current_domain_lower. CMD: $leave_cmd"; fi
    else log "Could not determine current domain to leave. Skipping 'realm leave'."; fi

    log "Stopping SSSD and related services..."; run_command "systemctl stop sssd chrony ntp systemd-timesyncd" &>/dev/null; run_command "systemctl disable sssd chrony ntp systemd-timesyncd" &>/dev/null
    log "Removing SSSD, Kerberos, and related packages..."
    local -a packages_to_remove=( sssd sssd-tools sssd-ad sssd-krb5 krb5-user libpam-sss libnss-sss realmd packagekit chrony ntp pamtester ) # packagekit is often a dependency for desktop env, remove with caution
    local -a actually_installed_for_removal=(); for pkg in "${packages_to_remove[@]}"; do if dpkg -s "$pkg" &>/dev/null; then actually_installed_for_removal+=("$pkg"); fi; done
    if [[ ${#actually_installed_for_removal[@]} -gt 0 ]]; then run_command "apt-get remove --purge -y ${actually_installed_for_removal[*]}"; run_command "apt-get autoremove -y"; log "Packages removed: ${actually_installed_for_removal[*]}"; else log "No SSSD/Kerberos specific packages found to remove."; fi

    log "Cleaning up configuration files..."; run_command "rm -f /etc/sssd/sssd.conf"; run_command "rm -f /etc/krb5.conf"; run_command "rm -rf /etc/sssd/conf.d/"; run_command "rm -f /etc/sssd/sssd.conf.bak_pre_script_*"
    local nss_conf="/etc/nsswitch.conf"; if [[ -f "$nss_conf" ]]; then log "Attempting to remove 'sss' entries from $nss_conf..."; run_command "cp \"$nss_conf\" \"${nss_conf}.bak_pre_sss_removal_$(date +%Y%m%d_%H%M%S)\""; run_command "sed -i -E 's/[[:space:]]+sss\b//g; s/\bsss[[:space:]]+//g; s/\bsss\b//g' \"$nss_conf\""; log "$nss_conf after cleaning:"; run_command "cat $nss_conf"; fi
    if command -v pam-auth-update &>/dev/null; then log "Attempting to disable SSS and mkhomedir modules via pam-auth-update..."; if ! run_command "DEBIAN_FRONTEND=noninteractive pam-auth-update --remove sss --remove mkhomedir"; then log "Warning: pam-auth-update --remove had issues."; else log "pam-auth-update --remove completed."; fi; else log "pam-auth-update not found. Manual PAM cleanup needed."; fi
    run_command "rm -rf /var/lib/sss/*"; run_command "rm -rf /var/log/sssd/*"; log "SSSD/Kerberos uninstallation attempt completed."
}

full_sssd_kerberos_setup() {
    backup_config; ensure_time_sync && install_sssd_krb_packages && join_ad_domain_realm && configure_sssd_conf && configure_krb5_conf && configure_nsswitch && configure_pam && restart_and_verify_sssd && log "Core SSSD/Kerberos setup completed." || { log "ERROR: Core SSSD/Kerberos setup failed."; return 1; }
}

main_sssd_kerberos_menu() {
    setup_backup_dir # Ensure backup dir is ready for this session if menu is entered directly
    while true; do
        printf "\n===== SSSD/Kerberos (AD Integration) Setup Menu =====\n"
        printf "1. Full SSSD/Kerberos Setup (Time Sync, Pkgs, Join, Config, Test)\n"
        printf -- "---------------------- Individual Steps ---------------------\n"
        printf "T. Ensure Time Synchronization (Chrony/NTP)\n2. Install SSSD/Kerberos Packages\n3. Join AD Domain (interactive 'realm join')\n"
        printf "4. Generate and Configure sssd.conf (from template)\n5. Configure krb5.conf (basics)\n6. Configure nsswitch.conf\n"
        printf "7. Configure PAM for SSSD\n8. Restart and Verify SSSD Service\n"
        printf -- "------------------------- Tests -------------------------\n"
        printf "9. Test Kerberos Ticket Acquisition (kinit)\n10. Test User Information Lookup (getent, id)\n11. Test RStudio PAM Integration (pamtester)\n"
        printf -- "----------------------- Maintenance ---------------------\n"
        printf "U. Uninstall SSSD/Kerberos Configuration\nV. View current generated sssd.conf (from template)\nR. Restore All Configurations from Last Backup\nE. Exit\n"
        printf "=======================================================\n"
        read -r -p "Enter choice: " choice
        case $choice in
            1) full_sssd_kerberos_setup ;; T|t) backup_config && ensure_time_sync ;; 2) backup_config && install_sssd_krb_packages ;;
            3) backup_config && ensure_time_sync && join_ad_domain_realm && configure_krb5_conf && restart_and_verify_sssd ;;
            4) backup_config && configure_sssd_conf && restart_and_verify_sssd ;; 5) backup_config && configure_krb5_conf && restart_and_verify_sssd ;;
            6) backup_config && configure_nsswitch && restart_and_verify_sssd ;; 7) backup_config && configure_pam && restart_and_verify_sssd ;;
            8) restart_and_verify_sssd ;; 9) test_kerberos_ticket ;; 10) test_user_lookup ;; 11) test_rstudio_pam_integration ;;
            U|u) uninstall_sssd_kerberos ;;
            V|v) generate_sssd_conf_from_template || log "Failed to generate template preview."; if [[ -n "$GENERATED_SSSD_CONF" ]]; then printf -- "---\nGenerated sssd.conf Template Preview:\n%s\n---\n" "$GENERATED_SSSD_CONF"; fi ;;
            R|r) restore_config ;; E|e) log "Exiting SSSD/Kerberos Setup."; break ;; *) printf "Invalid choice.\n" ;;
        esac
        [[ "$choice" != "e" && "$choice" != "E" ]] && read -r -p "Press Enter to continue..."
    done
}
log "=== SSSD/Kerberos Setup Script Started ==="
main_sssd_kerberos_menu
log "=== SSSD/Kerberos Setup Script Finished ==="
