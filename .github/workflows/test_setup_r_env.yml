name: Test setup_r_env.sh (Comprehensive)

on:
  push:
    paths:
      - 'setup_r_env.sh'
      - '.github/workflows/test_setup_r_env.yml'
  pull_request:
    paths:
      - 'setup_r_env.sh'
      - '.github/workflows/test_setup_r_env.yml'
  workflow_dispatch:

jobs:
  test-script:
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    container:
      image: ubuntu:24.04
      options: --user root

    steps:
      # 0. Setup and dependencies
      - name: Install required packages
        run: |
          apt-get update
          apt-get install -y sudo git curl ca-certificates lsb-release wget gdebi-core apt-transport-https gnupg2 shellcheck net-tools iputils-ping systemctl su
          apt-get install -y openssh-client
          mkdir -p /run/systemd && echo 'docker' > /run/systemd/container

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show runner info
        run: |
          uname -a
          lsb_release -a || cat /etc/os-release
          df -h
          free -h

      - name: Make script executable
        run: chmod +x setup_r_env.sh

      - name: Lint with ShellCheck
        run: shellcheck setup_r_env.sh

      # --- INSTALLATION & VERIFICATION STEPS ---

      # 1. Test core install functions (individual)
      - name: Test pre-flight checks
        run: ./setup_r_env.sh fn_pre_flight_checks

      - name: Test add CRAN repo
        run: ./setup_r_env.sh fn_add_cran_repo

      - name: Test install R
        run: ./setup_r_env.sh fn_install_r

      - name: Test install OpenBLAS/OpenMP
        run: ./setup_r_env.sh fn_install_openblas_openmp

      - name: Test setup bspm
        run: ./setup_r_env.sh fn_setup_bspm

      - name: Test install R packages
        run: ./setup_r_env.sh fn_install_r_packages

      - name: Test install RStudio Server
        run: ./setup_r_env.sh fn_install_rstudio_server

      # 2. Verify state after install
      - name: Verify R installation
        run: |
          R --version
          Rscript --version
          Rscript -e "sessionInfo()"

      - name: Verify CRAN/BSPM packages are installed
        run: |
          Rscript -e "pkgs <- c('terra','raster','sf','dismo','spThin','tidyverse','bspm'); print(sapply(pkgs, requireNamespace, quietly=TRUE))"

      - name: Verify devtools & GitHub packages
        run: |
          Rscript -e "if (!requireNamespace('devtools', quietly=TRUE)) stop('devtools not installed')"
          Rscript -e "if (!requireNamespace('transformeR', quietly=TRUE)) warning('transformeR not installed')"

      - name: Verify RStudio Server installation
        run: |
          systemctl status rstudio-server || true
          which rstudio-server || true
          rstudio-server version || true

      - name: Test RStudio Server HTTP (port check)
        run: |
          systemctl is-active rstudio-server && sleep 5
          netstat -ntlp | grep 8787 || ss -ntlp | grep 8787

      # --- UNINSTALL/CLEANUP & IDPOTENCY TESTS ---

      # 3. Uninstall all (cleanup)
      - name: Test uninstall_all (cleanup)
        run: LOG_LEVEL=DEBUG ./setup_r_env.sh uninstall_all || true

      # 4. Confirm removal of R, RStudio, and packages
      - name: Confirm removal of R, RStudio, packages
        run: |
          ! command -v R || { echo "R still found!"; exit 1; }
          ! command -v rstudio-server || { echo "RStudio still found!"; exit 1; }
          ! dpkg -s r-base || { echo "r-base still installed!"; exit 1; }
          ! dpkg -s rstudio-server || { echo "rstudio-server still installed!"; exit 1; }
          Rscript -e "q('no')" 2>/dev/null && { echo "Rscript still works!"; exit 1; } || true

      # 5. Test uninstall_all idempotency (run again)
      - name: Re-run uninstall_all (idempotency)
        run: LOG_LEVEL=DEBUG ./setup_r_env.sh uninstall_all || true

      # 6. Test dry-run uninstall
      - name: Dry-run uninstall_all
        run: LOG_LEVEL=DEBUG DRY_RUN=1 ./setup_r_env.sh uninstall_all || true

      # --- LOGGING & DEBUGGING ---

      - name: Archive installation logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: r_setup_logs
          path: /var/log/r_setup/
          if-no-files-found: ignore

      - name: Show main log tail
        if: always()
        run: |
          tail -n 50 /var/log/r_setup/r_setup_*.log || true

      # --- OPTIONAL/EDGE CASE TESTS ---

      - name: Test bad argument handling
        run: |
          ! ./setup_r_env.sh not_a_real_action

      - name: Test script as non-root (should fail gracefully)
        run: |
          set +e
          su -c "./setup_r_env.sh install_all" nobody 2>&1 | tee non_root_output.txt
          grep -iq "Run as root" non_root_output.txt

      - name: Test DRY_RUN and LOG_LEVEL
        run: LOG_LEVEL=DEBUG DRY_RUN=1 ./setup_r_env.sh install_all

      - name: Print environment
        run: env | sort

      - name: Menu/help/usage output
        run: ./setup_r_env.sh || true

      # --- (Uncomment these if you want full install/dry-run/idempotency of install) ---
      # - name: Dry-run install (simulate)
      #   run: LOG_LEVEL=DEBUG DRY_RUN=1 ./setup_r_env.sh install_all
      #
      # - name: Full install (actual run)
      #   run: LOG_LEVEL=DEBUG DRY_RUN=0 ./setup_r_env.sh install_all
      #
      # - name: Re-run install_all for idempotency
      #   run: LOG_LEVEL=DEBUG DRY_RUN=0 ./setup_r_env.sh install_all
