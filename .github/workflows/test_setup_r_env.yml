name: Test setup_r_env.sh (Comprehensive)

on:
  push:
    paths:
      - 'setup_r_env.sh'
      - '.github/workflows/test_setup_r_env.yml'
  pull_request:
    paths:
      - 'setup_r_env.sh'
      - '.github/workflows/test_setup_r_env.yml'
  workflow_dispatch:

jobs:
  test-script:
    runs-on: ubuntu-24.04 # Using a more specific recent runner
    timeout-minutes: 60
    container:
      image: ubuntu:24.04 # Match runner OS if possible for consistency
      options: --user root

    steps:
      # 0. Setup and dependencies
      - name: Install required packages
        run: |
          apt-get update -y
          apt-get install -y --no-install-recommends \
            sudo \
            git \
            curl \
            ca-certificates \
            lsb-release \
            wget \
            gdebi-core \
            apt-transport-https \
            gnupg2 \
            shellcheck \
            net-tools \
            iputils-ping \
            systemctl \
            dbus \
            openssh-client
          # Workaround for systemctl in containers (may have limited effect but satisfies some scripts)
          # Note: systemd itself isn't fully running as PID 1 in most Docker containers.
          if [ ! -d /run/systemd ]; then mkdir -p /run/systemd; fi
          if [ ! -f /run/systemd/container ]; then echo 'docker' > /run/systemd/container; fi
          apt-get clean
          rm -rf /var/lib/apt/lists/*

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show runner info
        run: |
          echo "--- System Info ---"
          uname -a
          lsb_release -a || cat /etc/os-release
          echo "--- Disk Usage ---"
          df -h
          echo "--- Memory Usage ---"
          free -h
          echo "--- User Info ---"
          echo "User: $(whoami)"
          echo "Sudo version: $(sudo --version || echo 'sudo not found')"
          echo "Systemctl path: $(which systemctl || echo 'systemctl not found')"
          echo "dbus daemon path: $(which dbus-daemon || echo 'dbus-daemon not found')"

      # dbus-daemon might not be started by systemctl in a container.
      # The script itself has a warning if it can't detect dbus, which is generally acceptable for bspm.
      # If bspm truly fails due to dbus, one might try:
      # sudo mkdir -p /var/run/dbus
      # sudo dbus-daemon --system --fork || echo "dbus-daemon --system failed (may be ok for bspm)"
      # For now, just installing the package should make necessary libraries available for python-apt.

      - name: Make script executable
        run: chmod +x setup_r_env.sh

      - name: Lint with ShellCheck
        run: shellcheck setup_r_env.sh

      # --- INSTALLATION & VERIFICATION STEPS ---

      - name: Test pre-flight checks
        run: ./setup_r_env.sh fn_pre_flight_checks

      - name: Test add CRAN repo
        run: ./setup_r_env.sh fn_add_cran_repo

      - name: Test install R
        run: ./setup_r_env.sh fn_install_r

      - name: Test install OpenBLAS/OpenMP
        run: ./setup_r_env.sh fn_install_openblas_openmp
      
      - name: Test verify OpenBLAS/OpenMP with R
        run: ./setup_r_env.sh fn_verify_openblas_openmp

      - name: Test setup bspm
        run: ./setup_r_env.sh fn_setup_bspm

      - name: Test install R packages
        env:
          GITHUB_PAT: ${{ secrets.GH_PAT_FOR_R_PACKAGES }} # Use a specific secret if you have one
        run: ./setup_r_env.sh fn_install_r_packages

      - name: Test install RStudio Server
        run: ./setup_r_env.sh fn_install_rstudio_server

      # 2. Verify state after install
      - name: Verify R installation
        run: |
          R --version
          Rscript --version
          Rscript -e "sessionInfo()"

      - name: Verify CRAN/BSPM packages are installed
        run: |
          Rscript -e "pkgs <- c('terra','raster','sf','dismo','spThin','tidyverse','bspm'); print(sapply(pkgs, requireNamespace, quietly=TRUE)); if(!all(sapply(pkgs, requireNamespace, quietly=TRUE))) stop('One or more R packages not found')"

      - name: Verify devtools & GitHub packages
        run: |
          Rscript -e "if (!requireNamespace('devtools', quietly=TRUE)) stop('devtools not installed')"
          Rscript -e "if (!requireNamespace('transformeR', quietly=TRUE)) warning('transformeR not installed from GitHub. Check GITHUB_PAT and package availability.')" 

      - name: Verify RStudio Server installation
        run: |
          systemctl status rstudio-server || echo "systemctl status rstudio-server failed (may be expected in container)"
          which rstudio-server
          rstudio-server version || echo "rstudio-server version command failed"

      - name: Test RStudio Server HTTP (port check)
        run: |
          echo "Attempting to start RStudio Server if not running..."
          # The _safe_systemctl in the script should handle this, but an explicit attempt here for test
          if command -v systemctl &>/dev/null && ! systemctl is-active --quiet rstudio-server; then
             sudo systemctl start rstudio-server || echo "Failed to start rstudio-server with systemctl (may be expected)"
          elif [ -f /etc/init.d/rstudio-server ] && ! /etc/init.d/rstudio-server status | grep -q "is running"; then
             sudo /etc/init.d/rstudio-server start || echo "Failed to start rstudio-server with init.d script"
          fi
          echo "Waiting for RStudio Server to start (up to 60s)..."
          for i in $(seq 1 12); do
            if (command -v netstat && netstat -tulnp | grep -q ':8787') || \
               (command -v ss && ss -tulnp | grep -q ':8787'); then
              echo "RStudio Server is listening on port 8787."
              exit 0
            fi
            echo "Port 8787 not yet open (attempt $i/12), waiting 5s..."
            ps aux | grep -E 'rstudio|rserver' || true
            sleep 5
          done
          echo "RStudio Server FAILED to listen on port 8787 after 60s."
          ps aux | grep -E 'rstudio|rserver' || true
          exit 1

      # --- UNINSTALL/CLEANUP & IDPOTENCY TESTS ---

      - name: Test uninstall_all (cleanup)
        run: LOG_LEVEL=DEBUG ./setup_r_env.sh uninstall_all || true

      - name: Confirm removal of R, RStudio, packages
        run: |
          ! command -v R || { echo "R still found!"; exit 1; }
          ! command -v rstudio-server || { echo "RStudio Server still found!"; exit 1; }
          ! dpkg -s r-base >/dev/null 2>&1 || { echo "r-base still installed (checked with dpkg)!"; dpkg -s r-base; exit 1; }
          ! dpkg -s rstudio-server >/dev/null 2>&1 || { echo "rstudio-server still installed (checked with dpkg)!"; dpkg -s rstudio-server; exit 1; }
          Rscript -e "q('no')" 2>/dev/null && { echo "Rscript still works!"; exit 1; } || echo "Rscript correctly not working or not found."

      - name: Re-run uninstall_all (idempotency)
        run: LOG_LEVEL=DEBUG ./setup_r_env.sh uninstall_all || true

      # --- LOGGING & DEBUGGING ---

      - name: Archive installation logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: r_setup_logs_${{ github.run_id }}
          path: /var/log/r_setup/
          if-no-files-found: ignore

      - name: Show main log tail
        if: always()
        run: |
          if ls /var/log/r_setup/r_setup_*.log 1> /dev/null 2>&1; then
            tail -n 100 /var/log/r_setup/r_setup_*.log
          else
            echo "No r_setup logs found in /var/log/r_setup/"
          fi

      # --- OPTIONAL/EDGE CASE TESTS ---
      - name: Test bad argument handling
        run: |
          ! ./setup_r_env.sh not_a_real_action

      - name: Test script as non-root (should fail gracefully)
        run: |
          set +e 
          id -u nobody >/dev/null 2>&1 || useradd nobody
          output=$(su -s /bin/bash -c "./setup_r_env.sh install_all" nobody 2>&1)
          echo "Output from non-root execution:"
          echo "${output}"
          set -e 
          echo "${output}" | grep -iq "Run as root" || \
            { echo "Expected 'Run as root' message not found!"; exit 1; }
          echo "Non-root test passed."

      - name: Menu/help/usage output
        run: ./setup_r_env.sh || true 
